import Events from '../helpers/Events';
import { DexieEventSet } from '../public/types/dexie-event-set';
import type {
  DexieYProvider,
  DucktypedYDoc,
} from '../public/types/yjs-related';
import { throwIfDestroyed } from './docCache';
import { getYLibrary } from './getYLibrary';
import { observeYDocUpdates } from './observeYDocUpdates';

export function DexieYProvider (doc: DucktypedYDoc): DexieYProvider {
  const { guid, collectionid: updatesTable, meta: { db, table }} =
    (doc as DucktypedYDoc) || {};
  if (!db || !table || !updatesTable)
    throw new Error('Y.Doc not generated by Dexie');
  if (!db.table(table) || !db.table(updatesTable)) {
    throw new Error(`Table ${table} or ${updatesTable} not found in db`);
  }
  throwIfDestroyed(doc);
  const Y = getYLibrary(db);
  function createEvents() {
    return Events(null, "load", "sync", "error") as DexieYProvider["on"];
  }
  let on = createEvents();
  const provider = {
    destroyed: false,
    doc,
    on,
    off (name: string, f: Function) { on[name]?.unsubscribe(f)},
    whenLoaded: new Promise((resolve, reject) => {
      on('load', resolve);
      on('error', reject);
    }),
    whenSynced: new Promise((resolve, reject) => {
      on('sync', resolve);
      on('error', reject);
    }),
    destroy() {
      this.destroyed = true;
      stopObserving();
      on = this.on = createEvents(); // Releases listeners for GC
    }
  };
  const stopObserving = observeYDocUpdates(provider, doc, db, table, updatesTable, guid, Y);
  doc.on('destroy', provider.destroy.bind(provider));
  db.on.y.fire(provider, Y); // Allow for addons to invoke their sync- and awareness providers here.

  return provider;
}
