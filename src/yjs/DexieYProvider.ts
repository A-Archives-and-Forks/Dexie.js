import type {
  DexieYProvider,
  DucktypedYDoc,
  DucktypedYObservable,
} from '../public/types/yjs-related';
import { throwIfDestroyed } from './docCache';
import { observeUpdates } from './observeUpdates';

export function DexieYProvider (doc: DucktypedYDoc): DexieYProvider {
  const { guid, collectionid: updatesTable, meta: { db, table }} =
    (doc as DucktypedYDoc) || {};
  if (!db || !table || !updatesTable)
    throw new Error('Y.Doc not generated by Dexie');
  if (!db.table(table) || !db.table(updatesTable)) {
    throw new Error(`Table ${table} or ${updatesTable} not found in db`);
  }
  throwIfDestroyed(doc);
  const Y = db._options.Y;
  if (!Y) throw new Error('Y library not supplied to Dexie constructor');

  const provider: DexieYProvider = new class extends (Y.Observable as new()=>DucktypedYObservable) {
    doc = doc;
    whenLoaded = new Promise((resolve, reject) => {
      this.once('load', resolve);
      this.once('error', reject);
    });
    whenSynced = new Promise((resolve, reject) => {
      this.once('sync', resolve);
      this.once('error', reject);
    });
    destroy() {
      stopObserving();
      super.destroy();
    }
  }
  const stopObserving = observeUpdates(provider, doc, db, table, updatesTable, guid, Y);
  db.on.y.fire(provider, Y); // Allow for addons to invoke their sync- and awareness providers here.

  return provider;
}  
